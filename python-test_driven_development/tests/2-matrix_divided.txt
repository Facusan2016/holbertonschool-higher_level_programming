The '2-matrix_divided' module
==========================

Using 'matrix_divided function'
------------------------------

Here we're testing matrix_divide.

First we import the function from the module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Testing the function without arguments:
    >>> matrix_divided()
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Testing if is not a list:
    >>> matrix_divided((1, 2, 3, 4), 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing if is not a list of lists:
    >>> print(matrix_divided([1, 2, 3, 4], 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

First testing when an input of the matrix is a string:
    >>> matrix_divided([[4,"School"], [4,4]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing if each row has the same size:
    >>> matrix_divided([[1, 2, 3], [1, 2]], 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Testing if div is not an Int or a Float:
    >>> matrix_divided([[4, 4], [4, 4]], "School")
    Traceback (most recent call last):
    TypeError: div must be a number

Testing if div is 0:
    >>> matrix_divided([[4, 4], [4, 4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Testing the correct amount of decimal places
    >>> matrix_divided([[4, 4], [4, 4]], 2.2)
    [[1.82, 1.82], [1.82, 1.82]]

Testing Nan Value:
    >>> matrix_divided([[1, 4], [1, 4]], float('NaN'))
    [[nan, nan], [nan, nan]]

Testing Inf value:
    >>> print(matrix_divided([[1, 4], [1, 4]], float('inf')))
    [[0.0, 0.0], [0.0, 0.0]]

