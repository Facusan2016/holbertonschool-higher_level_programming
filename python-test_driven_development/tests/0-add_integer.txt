The '0-add_integer' module
==========================

Using 'add function'
-------------------

Here we're testing the add function.

First we import the function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two integers:
    >>> print(add_integer(1, 2))
    3

Adding a being float and b being float:
    >>> print(add_integer(2.5, 2.5))
    4

Adding a being an Int and b being a String:
    >>> print(add_integer(4, "Holberton"))
    Traceback (most recent call last):
        ...
        raise TypeError('b must be an integer')
    TypeError: b must be an integer

Adding a being a String and b being a Int:
    >>> print(add_integer("Holberton", 4))
    Traceback (most recent call last):
        ...
        raise TypeError('a must be an integer')
    TypeError: a must be an integer

Adding a and b being Strings:
    >>> print(add_integer("Holberton", "School"))
    Traceback (most recent call last):
        ...
        raise TypeError('a must be an integer')
    TypeError: a must be an integer

Just passing a:
    >>> print(add_integer(2))
    100

Passing a = None, and b an Int:
    >>> print(add_integer(None, 3))
    Traceback (most recent call last):
        ...
        raise TypeError('a must be an integer')
    TypeError: a must be an integer

Using the function pasing a None value:
    >>> print(add_integer(None))
    Traceback (most recent call last):
        ...
        raise TypeError('a must be an integer')
    TypeError: a must be an integer

